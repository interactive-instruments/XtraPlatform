buildscript {  
    repositories {
        mavenLocal()
        mavenCentral() 
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
    } 
    dependencies {
        classpath group: 'de.interactive_instruments', name: 'gradle-plugin-osgi-ipojo', version: '1.12.1.27'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    } 
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = '1.1.1'

version += '-SNAPSHOT'

group = 'de.interactive_instruments'

repositories {     
    mavenCentral()
}

configurations {
    bundles {
        transitive = false
    }
}

dependencies {
     bundles subprojects.findAll { it.name != 'xtraplatform-dropwizard' }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'osgi-ipojo'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "license"

    version = '1.1.0'

    version += '-SNAPSHOT'

    group = 'de.interactive_instruments'

    sourceCompatibility = 1.8

    license {
        header rootProject.file('../gradle/license-header')
        strictCheck true
        excludes([
                "**/swagger-ui*",
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.html",
                "**/*.map",
                "**/*.json"])
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = "interactive instruments GmbH"
    }
    
    repositories {     
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "http://maven.forgerock.org/repo/repo"
        }
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
    }
    
    dependencies {    
        testCompile group: 'org.testng', name: 'testng', version: '6.8.5'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    }
    
    test {
        useTestNG()
        options {
            includeGroups 'default'
            /* if you want to run tests for debugging purposes that are not part
            of the continuous integration, put them in the "debug"-group and
            uncomment the following line just in your local working copy
             */
            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true
    
    }
    
    // aggregated javadoc
    /*afterEvaluate { project ->
        rootProject.javadoc {
            classpath += project.sourceSets.main.compileClasspath
            source += project.sourceSets.main.allJava
        }
    }*/


    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }

    configurations {
        embedded
        provided
        compile.extendsFrom embedded
        compile.extendsFrom provided
    }

    dependencies {
        
        // TODO
        provided 'com.google.guava:guava:23.1-jre'

        // TODO: retrieve from bundles-runtime
        provided group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        provided group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        provided group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

        provided group: 'org.osgi', name: 'org.osgi.compendium', version: '5.0.0'
        provided group: 'org.apache.felix', name: 'org.apache.felix.framework', version: '5.6.8'
        provided group: 'org.apache.felix', name: 'org.apache.felix.ipojo', version: '1.12.1'
    }
    
    jar {
        manifest { 
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName",project.name.replaceAll('-', '.')
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }
    afterEvaluate { project ->
    project.version += '-SNAPSHOT'
    bintray {
        user = project.bintrayUser
        key = project.bintrayApiKey
        publications = ['maven']
        publish = true
        pkg {
            repo = 'maven'
            name = project.name
            userOrg = 'iide'
            licenses = ['MPL-2.0']
            websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform'
            issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform/issues'
            vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform.git'
            githubRepo = 'interactive-instruments/XtraPlatform'
            githubReleaseNotesFile = 'README.md'
            version {
                name = project.version
            }
        }
    }
    }

configurations {
    doclava
}

dependencies {
    doclava files('/home/zahnen/development/javadoc-json-doclet/build/libs/javadoc-json-doclet-all.jar')
}

javadoc {
    options.doclet = "com.raidandfade.JsonDoclet.Main"
//    options.doclet = "com.rga78.javadoc.JsonDoclet"
    options.docletpath = configurations.doclava.files.asType(List)
    options.memberLevel = JavadocMemberLevel.PRIVATE
}
tasks.javadoc.dependsOn configurations.doclava

task foobar {
   dependsOn tasks.jar
   doLast {
      tasks.javadoc.options.addStringOption("manifest", project.jar.manifest.effectiveManifest.attributes.collect { k,v -> "$k==$v" }.join('&&').replaceAll(/,(?=([^"]*"[^"]*")*[^"]*$)/, '||'))
   }
}
tasks.javadoc.dependsOn tasks.foobar



}

task osgiDocs {
   inputs.files subprojects.collect { it.tasks.getByName('javadoc') }
   doLast {
      def bundles = inputs.files.files.stream().map({ f ->
         def bi = new File(f, "bundle-info.json").text
         new groovy.json.JsonSlurper().parseText(bi)
      })
      .collect(java.util.stream.Collectors.toList())

      bundles.forEach {bundle -> 
        bundle.deps = bundle.imported3Packages.stream()
        .map({pkg -> bundles.stream().filter({b2 -> b2.providedPackages.contains(pkg)}).findFirst()})
        .filter({b2 -> b2.isPresent()})
        .map({b2 -> b2.get()})
        .map({b2 -> b2.name})
        .filter({n -> !n.equals('xtraplatform-logging-i18n')})
        .filter({n -> !n.equals(bundle.name)})
        .sorted()
        .distinct()
        .collect(java.util.stream.Collectors.toList())

        println(bundle.name + ": " + bundle.deps)
      }

      println()
      println()

      bundles.forEach { b ->
         b.deps.forEach { d ->
            println("${b.name}(${b.name}) --> $d($d)")
         }
      }
   }
}


configure(subprojects.findAll {it.name != 'xtraplatform-api' && it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-logging-i18n' && it.name != 'xtraplatform-runtime'}) {
    dependencies {
        compile project(':xtraplatform-api')
    }
}

configure(subprojects.findAll {it.name != 'xtraplatform-logging-i18n' && it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-runtime'}) {
    dependencies {
        compile project(':xtraplatform-dropwizard')
    }
    
    jar {
    manifest { 
     instruction 'Import-Package', 'com.fasterxml.jackson.module.afterburner.ser'   
     instruction 'Import-Package', '*'   
    }
    }
}

configure(subprojects.findAll {it.name != 'xtraplatform-logging-i18n'}) {
    dependencies {
        compile project(':xtraplatform-logging-i18n')
    }
}

//conf2ScopeMappings.addMapping(1, configurations.provided, 'compile')

publishing {
    publications {
        mavenRoot(MavenPublication) {
            pom.withXml{
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.bundles.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                    dependencyNode.appendNode('scope', 'runtime')
                    
                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', '*')
                    exclusionNode.appendNode('artifactId', '*')
                }
            }
        }
    }
}

bintray {
    user = project.bintrayUser
    key = project.bintrayApiKey
    publications = ['mavenRoot']
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'iide'
        licenses = ['MPL-2.0']
        websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform'
        issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform/issues'
        vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform.git'
        githubRepo = 'interactive-instruments/XtraPlatform'
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
        }
    }
}

apply from: 'license-report.gradle'

//apply plugin: 'java'
apply plugin: 'xtraplatform-docs'

hello { 
    message = "Hi"
    recipient = "Gradle"
}
