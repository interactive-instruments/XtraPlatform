
subprojects {

    apply plugin: 'com.jfrog.bintray'
    apply plugin: "license"

    group = 'de.interactive_instruments'

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        //maven {
        //    url 'http://oss.sonatype.org/content/repositories/snapshots'
        //}
        maven {
            url "https://dl.bintray.com/iide/maven"
        }
        //mavenLocal()
    }

    configurations {
        //embedded
        provided
        //api.extendsFrom embedded
        implementation.extendsFrom provided
    }

    dependencies {
        compileOnly "org.immutables:value:2.6.1:annotations"
        annotationProcessor "org.immutables:value:2.6.1"


        // TODO
        implementation 'com.google.guava:guava:23.1-jre'

        // TODO: retrieve from bundles-runtime
        /*implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

        implementation group: 'org.osgi', name: 'org.osgi.compendium', version: '5.0.0'
        implementation group: 'org.apache.felix', name: 'org.apache.felix.framework', version: '5.6.8'
        implementation group: 'org.apache.felix', name: 'org.apache.felix.ipojo', version: '1.12.1'
        implementation group: 'org.apache.felix', name: 'org.apache.felix.ipojo.handler.eventadmin', version: '1.8.0'
        */

        implementation group: 'de.interactive_instruments', name: 'xtraplatform-bundles-runtime', version: '2.0.0'
    }

    compileJava {
        String relativePath = "build/generated/src/main/java"
        sourceSets.main.java { srcDir relativePath }
        File generatedSourceDir = project.file("build/generated/src/main/java")
        project.mkdir(generatedSourceDir)
        options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
        outputs.dir(generatedSourceDir)

        doFirst {
            // force a clean of generatedSourceDir to prevent java.lang.IllegalStateException: endPosTable already set. This shouldn't be need if using Gradle 4.8+ or Java 9+.
            project.delete(generatedSourceDir)
            project.mkdir(generatedSourceDir)
        }
    }

    jar {
        manifest {
            instruction '-removeheaders', 'Bnd-LastModified'
            instructionReplace "Bundle-SymbolicName", project.name
        }
    }

    dependencies {
        testImplementation group: 'org.testng', name: 'testng', version: '6.8.5'
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    }

    test {
        useTestNG()
        options {
            includeGroups 'default'
            // if you want to run tests for debugging purposes that are not part
            //of the continuous integration, put them in the "debug"-group and
            //uncomment the following line just in your local working copy

            //includeGroups 'debug'
            //includeGroups 'performance'
            //includeGroups 'integration'
        }
        testLogging.showStandardStreams = true
        reports.html.enabled = true

    }

    // aggregated javadoc
    //afterEvaluate { project ->
    //    rootProject.javadoc {
    //        classpath += project.sourceSets.main.compileClasspath
    //        source += project.sourceSets.main.allJava
    //    }
    //}


    /*jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }*/

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }
    afterEvaluate { project ->
        //project.version += '-SNAPSHOT'
        bintray {
            user = project.bintrayUser
            key = project.bintrayApiKey
            publications = ['maven']
            publish = true
            pkg {
                repo = 'maven'
                name = project.name
                userOrg = 'iide'
                licenses = ['MPL-2.0']
                websiteUrl = 'https://github.com/interactive-instruments/XtraPlatform'
                issueTrackerUrl = 'https://github.com/interactive-instruments/XtraPlatform/issues'
                vcsUrl = 'https://github.com/interactive-instruments/XtraPlatform.git'
                githubRepo = 'interactive-instruments/XtraPlatform'
                githubReleaseNotesFile = 'README.md'
                version {
                    name = project.version
                }
            }
        }
    }

    configurations {
        doclava
    }

    dependencies {
        doclava files('/home/zahnen/development/javadoc-json-doclet/build/libs/javadoc-json-doclet-all.jar')
    }

    javadoc {
        options.doclet = "com.raidandfade.JsonDoclet.Main"
//    options.doclet = "com.rga78.javadoc.JsonDoclet"
        options.docletpath = configurations.doclava.files.asType(List)
        options.memberLevel = JavadocMemberLevel.PRIVATE
    }
    tasks.javadoc.dependsOn configurations.doclava

    task foobar {
        dependsOn tasks.jar
        doLast {
            tasks.javadoc.options.addStringOption("manifest", project.jar.manifest.effectiveManifest.attributes.collect { k,v -> "$k==$v" }.join('&&').replaceAll(/,(?=([^"]*"[^"]*")*[^"]*$)/, '||'))
        }
    }
    tasks.javadoc.dependsOn tasks.foobar

    license {
        header rootProject.file('../gradle/license-header')
        strictCheck true
        excludes([
                "**/swagger-ui*",
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.html",
                "**/*.map",
                "**/*.json"])
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = "interactive instruments GmbH"
    }



}

configure(subprojects.findAll {
    it.name != 'xtraplatform-api' && it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-runtime'
}) {
    dependencies {
        compile project(':xtraplatform-api')
    }
}

configure(subprojects.findAll { it.name != 'xtraplatform-dropwizard' && it.name != 'xtraplatform-runtime' }) {
    dependencies {
        compile project(':xtraplatform-dropwizard')
    }

    jar {
        manifest {
            instruction 'Import-Package', 'com.fasterxml.jackson.module.afterburner.ser'
            instruction 'Import-Package', '*'
        }
    }
}